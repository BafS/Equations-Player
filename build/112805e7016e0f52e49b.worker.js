!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="./",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const r=function(e){this.sampleRate=e.sampleRate||48e3,this.bitDepth=e.bitDepth||16,this.recordedBuffers=[],this.bytesPerSample=this.bitDepth/8};self.onmessage=function(e){const t=new r(e.data.config);t.record(e.data.pcmArrays),t.requestData()},r.prototype.record=function(e){this.numberOfChannels=this.numberOfChannels||e.length;const t=e[0].length,n=new Uint8Array(t*this.numberOfChannels*this.bytesPerSample);for(let r=0;r<t;r++)for(let t=0;t<this.numberOfChannels;t++){const s=(r*this.numberOfChannels+t)*this.bytesPerSample;let i=e[t][r];switch(i>1?i=1:i<-1&&(i=-1),this.bytesPerSample){case 4:i*=2147483648,n[s]=i,n[s+1]=i>>8,n[s+2]=i>>16,n[s+3]=i>>24;break;case 3:i*=8388608,n[s]=i,n[s+1]=i>>8,n[s+2]=i>>16;break;case 2:i*=32768,n[s]=i,n[s+1]=i>>8;break;case 1:n[s]=128*(i+1);break;default:throw Error("Only 8, 16, 24 and 32 bits per sample are supported")}}this.recordedBuffers.push(n)},r.prototype.requestData=function(){const e=this.recordedBuffers[0].length,t=this.recordedBuffers.length*e,n=new Uint8Array(44+t),r=new DataView(n.buffer);r.setUint32(0,1380533830,!1),r.setUint32(4,36+t,!0),r.setUint32(8,1463899717,!1),r.setUint32(12,1718449184,!1),r.setUint32(16,16,!0),r.setUint16(20,1,!0),r.setUint16(22,this.numberOfChannels,!0),r.setUint32(24,this.sampleRate,!0),r.setUint32(28,this.sampleRate*this.bytesPerSample*this.numberOfChannels,!0),r.setUint16(32,this.bytesPerSample*this.numberOfChannels,!0),r.setUint16(34,this.bitDepth,!0),r.setUint32(36,1684108385,!1),r.setUint32(40,t,!0);for(let s=0;s<this.recordedBuffers.length;s++)n.set(this.recordedBuffers[s],s*e+44);self.postMessage(n,[n.buffer]),self.close()},t.default=r}]);